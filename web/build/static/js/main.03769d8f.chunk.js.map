{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TARGET_OPTIONS","App","props","inputEditor","outputEditor","input","localStorage","getItem","PACKAGE","name","state","targetMenu","targetSelected","output","inputEditorDidMount","bind","outputEditorDidMount","updateEditorsLayout","handleInput","handleTargetIconClick","handleTargetMenuClose","window","addEventListener","this","doGenerate","editor","_monaco","focus","layout","newValue","_event","a","setItem","json2type","Target","JSON","parse","setState","e","toString","event","target","currentTarget","dataset","classes","Box","className","root","CssBaseline","AppBar","position","Toolbar","variant","Typography","sx","flexGrow","Tooltip","title","enterDelay","Button","color","aria-owns","undefined","aria-haspopup","onClick","targetLanguage","fontSize","Menu","id","anchorEl","open","Boolean","onClose","map","MenuItem","data-no-link","selected","data-target","IconButton","component","href","repository","url","data-ga-event-category","data-ga-event-action","bifoldContainer","display","flexWrap","minHeight","editorPane","flexDirection","width","height","language","theme","value","onChange","editorDidMount","Component","withStyles","createStyles","overflow","breakpoints","down","up","flexBasis","minWidth","optionPane","margin","spacing","formControl","selectEmpty","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03769d8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport MonacoEditor from 'react-monaco-editor';\nimport { AppBar, Box, CssBaseline, /* Grid, */ Theme, Toolbar, Typography, createStyles, IconButton, withStyles, WithStyles, /*FormControl, InputLabel, Select,*/ Menu, MenuItem, Tooltip, Button } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n// import ResizeObserver from 'react-resize-detector';\n\nimport PACKAGE from '../package.json'\n\n\nconst TARGET_OPTIONS = ['Dataclass', 'DataclassWithJSON', 'PydanticBaseModel', 'PydanticDataclass', 'TypedDict', 'NestedTypedDict'] as const\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: \"100vw\", height: \"100vh\", overflow: 'hidden'\n  },\n  bifoldContainer: {\n    [theme.breakpoints.down('sm')]: { flexDirection: 'column' },\n    [theme.breakpoints.up('sm')]: { flexDirection: 'row' },\n  },\n  editorPane: {\n    display: 'flex',\n    flexBasis: \"50%\",\n    minWidth: \"0px\", // override content-width\n    minHeight: \"0px\", // override content-width\n  },\n  optionPane: {\n    margin: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  targetLanguage: { margin: theme.spacing(0, 0.5, 0, 1) }\n})\n\ninterface Props extends WithStyles<typeof styles> { }\n\ninterface State {\n  targetMenu: any\n  targetSelected: (typeof TARGET_OPTIONS)[number]\n  output: string\n}\n\nclass App extends Component<Props, State> {\n  inputEditor?: any\n  outputEditor?: any\n  input = `{\"message\": \"Try to paste some structural JSON here\"}`\n\n  constructor(props: Props) {\n    super(props)\n\n    this.input = localStorage.getItem(`${PACKAGE.name}-code`) ?? this.input\n\n    this.state = {\n      targetMenu: null,\n      targetSelected: (localStorage.getItem(\"targetSelected\") as any) ?? TARGET_OPTIONS[0],\n      output: \"# No input\"\n    }\n\n    this.inputEditorDidMount = this.inputEditorDidMount.bind(this)\n    this.outputEditorDidMount = this.outputEditorDidMount.bind(this)\n    this.updateEditorsLayout = this.updateEditorsLayout.bind(this)\n    this.handleInput = this.handleInput.bind(this)\n    this.handleTargetIconClick = this.handleTargetIconClick.bind(this)\n    this.handleTargetMenuClose = this.handleTargetMenuClose.bind(this)\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateEditorsLayout)\n    this.doGenerate()\n  }\n\n  inputEditorDidMount(editor: any, _monaco: any) {\n    editor.focus()\n    this.inputEditor = editor\n  }\n\n  outputEditorDidMount(editor: any, _monaco: any) {\n    this.outputEditor = editor\n  }\n\n  updateEditorsLayout() {\n    this.inputEditor && this.inputEditor.layout()\n    this.outputEditor && this.outputEditor.layout()\n  }\n\n  async handleInput(newValue: string, _event: any) {\n    localStorage.setItem(`${PACKAGE.name}-code`, newValue)\n    this.input = newValue\n    this.doGenerate()\n  }\n\n  async doGenerate() {\n    const { json2type, Target } = await import('../../pkg/json2pyi')\n    try {\n      // Pre-validate JSON\n      // TODO: proper error handling within Rust module\n      JSON.parse(this.input)\n    }\n    catch (_e) {\n      return\n    }\n    try {\n      const output = json2type(this.input, Target[this.state.targetSelected])\n      output && this.setState({ output })\n    } catch (e) {\n      this.setState({output: e.toString()})\n    }\n  }\n\n  handleTargetIconClick(event: any) {\n    this.setState({ targetMenu: event.target })\n  }\n\n  handleTargetMenuClose(event: any) {\n    // console.log(event.currentTarget, event.currentTarget.nodeName);\n    // if (event.currentTarget.nodeName === 'A') {\n    // console.log(event.currentTarget.target)\n    // }\n    localStorage.setItem(\"targetSelected\", event.currentTarget.dataset.target ?? TARGET_OPTIONS[0])\n    this.setState({ targetMenu: null, targetSelected: event.currentTarget.dataset.target ?? TARGET_OPTIONS[0] })\n    this.doGenerate()\n  } \n\n  render() {\n    const classes = this.props.classes;\n    const targetSelected = this.state.targetSelected //localStorage.getItem('targetSelected') ?? TARGET_OPTIONS[0]\n\n    return (\n      // <ResizeObserver handleWidth handleHeight onResize={this.updateEditorsLayout}>\n      <Box className={classes.root}>\n        <CssBaseline />\n        <AppBar position='static'>\n          <Toolbar variant='dense'>\n            <Typography variant=\"h6\">\n              JSON to Python Types\n            </Typography>\n            {/* <LinearProgress color=\"secondary\" /> */}\n            <Box sx={{ flexGrow: 1 }} />\n            <Tooltip title=\"Select Target Language\" enterDelay={300}>\n              <Button\n                color=\"inherit\"\n                aria-owns={this.state.targetMenu ? 'target-menu' : undefined}\n                aria-haspopup=\"true\"\n                onClick={this.handleTargetIconClick}\n              // data-ga-event-category=\"header\"\n              // data-ga-event-action=\"language\"\n              >\n                <SettingsIcon />\n                <span className={classes.targetLanguage}>\n                  {/* {LANGUAGES_LABEL.filter((language) => language.code === userLanguage)[0].text} */}\n                  Python - {targetSelected}\n                </span>\n                <ExpandMoreIcon fontSize=\"small\" />\n              </Button>\n            </Tooltip>\n            <Menu\n              id=\"target-menu\"\n              anchorEl={this.state.targetMenu}\n              open={Boolean(this.state.targetMenu)}\n              onClose={this.handleTargetMenuClose}\n            >\n              {TARGET_OPTIONS.map((target) => (\n                <MenuItem\n                  // component=\"a\"\n                  data-no-link=\"true\"\n                  // href={language.code === 'en' ? canonical : `/${language.code}${canonical}`}\n                  key={target}\n                  selected={target === targetSelected}\n                  onClick={this.handleTargetMenuClose}\n                  data-target={target}\n                // hrefLang={language.code}\n                >\n                  Python - {target}\n                </MenuItem>\n              ))}\n            </Menu>\n          <Tooltip title={\"Source Code\"} enterDelay={300}>\n            <IconButton\n              component=\"a\"\n              color=\"inherit\"\n              href={PACKAGE.repository.url}\n              data-ga-event-category=\"header\"\n              data-ga-event-action=\"github\"\n            >\n              <GitHubIcon />\n            </IconButton>\n          </Tooltip>\n          </Toolbar>\n        </AppBar>\n        <Box\n          // container\n          className={classes.bifoldContainer}\n          sx={{ flexGrow: 1, display: 'flex', flexWrap: 'nowrap', minHeight: \"0px\" }}\n        >\n          <Box className={classes.editorPane} sx={{ display: 'flex', flexDirection: 'column' }}>\n            {/* <Box className={classes.optionPane}>\n              <FormControl variant=\"outlined\" className={classes.formControl} sx={{ minWidth: \"10em\" }}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Target Language</InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-outlined-label\"\n                  id=\"demo-simple-select-outlined\"\n                  value={10}\n                  // onChange={handleChange}\n                  label=\"Target Language\"\n                  className={classes.selectEmpty}\n                >\n                  <MenuItem value=\"\">\n                    <em>Python</em>\n                  </MenuItem>\n                  <MenuItem value={10}>Rust</MenuItem>\n                  <MenuItem value={20}>Twenty</MenuItem>\n                  <MenuItem value={30}>Thirty</MenuItem>\n                </Select>\n              </FormControl>\n            </Box> */}\n            <Box flexGrow={1}>\n              <MonacoEditor\n                width=\"100%\"\n                height=\"100%\"\n                language=\"json\"\n                theme=\"vs-light\"\n                value={this.input}\n                // options={{lineNumbersMinChars:3}}\n                onChange={this.handleInput}\n                editorDidMount={this.inputEditorDidMount}\n              />\n            </Box>\n          </Box>\n          <Box className={classes.editorPane}>\n            <MonacoEditor\n              width=\"100%\"\n              height=\"100%\"\n              language=\"python\"\n              theme=\"vs-light\"\n              value={this.state.output}\n              // options={{lineNumbersMinChars:3}}\n              // onChange={::this.onChange}\n              editorDidMount={this.outputEditorDidMount}\n            />\n          </Box>\n        </Box>\n      </Box>)\n    // </ResizeObserver>\n\n  }\n}\n\n// function App() {\n//   const classes = useStyles();\n\n//   // const state, setState \n\n//   return <Box className={classes.root}>\n//     <CssBaseline />\n//     <AppBar position='static'>\n//       <Toolbar variant='dense'>\n//         <Typography variant=\"h6\">\n//           JSON to Type\n//         </Typography>\n//       </Toolbar>\n//     </AppBar>\n//     <Grid\n//       container\n//       sx={{ flexGrow: 1 }}\n//       direction=\"row\"\n//     >\n//       <Grid item xs={12} sm={4} md={6}>\n//         <MonacoEditor\n//           width=\"100%\"\n//           height=\"100%\"\n//           language=\"javascript\"\n//           theme=\"vs-light\"\n//           value={\"Source a\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nb\"}\n//         // options={ }\n//         // onChange={::this.onChange}\n//         //   editorDidMount={::this.editorDidMount}\n//         />\n//       </Grid>\n//       <Grid item xs={12} sm={8} md={6}>\n//         <MonacoEditor\n//           width=\"100%\"\n//           height=\"100%\"\n//           language=\"javascript\"\n//           theme=\"vs-light\"\n//           value={\"Target a\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nba\\n\\nb\"}\n//         // options={ }\n//         // onChange={::this.onChange}\n//         //   editorDidMount={::this.editorDidMount}\n//         />\n//       </Grid>\n//     </Grid>\n//   </Box>\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//       <MonacoEditor\n//         width=\"800\"\n//         height=\"600\"\n//         language=\"javascript\"\n//         theme=\"vs-light\"\n//       // valreact  ue={}\n//       // options={}\n//       // onChange={::this.onChange}\n//       // editorDidMount={::this.editorDidMount}\n//       />\n//     </div>\n//   );\n// }\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}